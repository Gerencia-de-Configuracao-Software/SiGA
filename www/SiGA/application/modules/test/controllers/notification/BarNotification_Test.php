<?php

/**
 ***** Notification class(on /data_types/notification) test class.
 *
 *
 * Provide unit tests for the Notification class methods.
 * To access the report generated by these tests, type on the URL: '../notification_test'
 */

require_once(MODULESPATH."/test/controllers/TestCase.php");

require_once(MODULESPATH."auth/domain/User.php");

require_once(MODULESPATH."/notification/controllers/Notification.php");
require_once(MODULESPATH."/notification/domain/BarNotification.php");
require_once(MODULESPATH."/notification/domain/RegularNotification.php");
require_once(MODULESPATH."/notification/domain/ActionNotification.php");

require_once(MODULESPATH."/notification/domain/navbar/DocumentRequestNotification.php");

require_once(MODULESPATH."/notification/exception/NotificationException.php");

class BarNotification_Test extends TestCase{

    public function __construct(){
        parent::__construct($this);
    }

    public function createTestUser(){
        
        $user = new User(2, "John Doe", FALSE, "johndoe@mail.com");

        return $user;
    }

/* Id tests */
    public function shouldInstantiateWithValidId1(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the id equals to ".$id;

        $this->unit->run($id, $notification->id(), $test_name, $notes);
    }

    public function shouldInstantiateWithValidRandomId(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = rand(1, PHP_INT_MAX);
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a random valid id equals to ".$id;

        $this->unit->run($id, $notification->id(), $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidId0(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = 0;
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid id equals to ".$id;

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidRandomId(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = rand(PHP_INT_MAX + 1, 0);
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a random valid id equals to ".$id;

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNullId(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = NULL;
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a random valid id equals to NULL".$id;

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithBlankId(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a random valid id equals to NULL".$id;

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNotNumberId(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1asd";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a random valid id equals to NULL".$id;

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

// User tests
    public function shouldInstantiateWithValidUser(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid user";

        $this->unit->run($user, $notification->user(), $test_name, $notes);
    }    

    public function shouldNotInstantiateWithInvalidNullUser(){

        $user = NULL;
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with invalid NULL user";

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNotUserUser(){

        $user = new DateTime();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a  not User object";

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidFalseUser(){

        $user = FALSE;
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with invalid FALSE user";

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

// Seen tests
    public function shouldInstantiateWithValidFalseSeen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value FALSE";

        $this->unit->run($seen, $notification->seen(), $test_name, $notes);
    }

    public function shouldInstantiateWithValidTrueSeen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = TRUE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value TRUE";

        $this->unit->run($seen, $notification->seen(), $test_name, $notes);
    }

    public function shouldInstantiateWithValid1Seen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = 1;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value 1";

        $this->unit->run(TRUE, $notification->seen(), $test_name, $notes);
    }

    public function shouldInstantiateWithValidString1Seen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = "1";

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value 1";

        $this->unit->run(TRUE, $notification->seen(), $test_name, $notes);
    }

    public function shouldInstantiateWithValidString0Seen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = "0";

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value 1";

        $this->unit->run($notification->seen(), "is_false", $test_name, $notes);
    }

    public function shouldReturnFalseWithInvalidNumberSeen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = 0;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value FALSE";

        $this->unit->run($notification->seen(), "is_false", $test_name, $notes);
    }

    public function shouldReturnFalseWithInvalidNullSeen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = NULL;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value FALSE";

        $this->unit->run($notification->seen(), "is_false", $test_name, $notes);
    }

    public function shouldReturnFalseWithInvalidBlankSeen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = "";

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value FALSE";

        $this->unit->run($notification->seen(), "is_false", $test_name, $notes);
    }

    public function shouldReturnFalseWithInvalidStringSeen(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = "TRUE";

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid seen value FALSE";

        $this->unit->run($notification->seen(), "is_false", $test_name, $notes);
    }

// ActionNotification link tests

    public function shouldInstantiateWithValidLink(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;
        $link = "/controller/act-ion/1/2";

        $notes = "";
        try{
            $notification = new ActionNotification($user, $link, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid link '".$link."'.";

        $this->unit->run($link, $notification->link(), $test_name, $notes);
    }

    public function shouldInstantiateWithValidStringRouteLink(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;
        $link = "route_to_link/12";

        $notes = "";
        try{
            $notification = new ActionNotification($user, $link, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a valid link '".$link."'.";

        $this->unit->run($link, $notification->link(), $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNullLink(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;
        $link = NULL;

        $notes = "";
        try{
            $notification = new ActionNotification($user, $link, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NULL link ";

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidBlankLink(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;
        $link = "";

        $notes = "";
        try{
            $notification = new ActionNotification($user, $link, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid blank link ";

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidFalseLink(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;
        $link = FALSE;

        $notes = "";
        try{
            $notification = new ActionNotification($user, $link, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid FALSE link ";

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidDisallowedCharacthersLink(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;
        $link = "controller@/**,";

        $notes = "";
        try{
            $notification = new ActionNotification($user, $link, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid link with disallowed characters";

        $this->unit->run($notification, "is_false", $test_name, $notes);
    }

// Type tests

    public function shouldReturnRegularNotificationType(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;

        $notes = "";
        try{
            $notification = new RegularNotification($user, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if return RegularNotification type";

        $this->unit->run(RegularNotification::class, $notification->type(), $test_name, $notes);
    }

    public function shouldReturnActionNotificationType(){

        $user = $this->createTestUser();
        $content = "Hi John Doe!";
        $id = "1";
        $seen = FALSE;
        $link = "route";

        $notes = "";
        try{
            $notification = new ActionNotification($user, $link, $id, $seen);
        }catch (NotificationException $e){
            $notification = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if return ActionNotification type";

        $this->unit->run(ActionNotification::class, $notification->type(), $test_name, $notes);
    }

    public function shouldSaveRegularNotification(){

        $user = $this->createTestUser();
        $courseToNotify = 1;
        $requestedDoc = "Declaração";

        $notes = "";
        try{

            $this->load->module("notification/notification");
            // Uncomment to test if creates a notification
            // $this->notification->documentRequestNotification($user, $courseToNotify, $requestedDoc);

            $saved = TRUE;

        }catch (NotificationException $e){
            $notification = FALSE;
            $saved = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if save notification";

        $this->unit->run($saved, "is_true", $test_name, $notes);
    }

    // public function shouldReturnNotifications(){

    //     $user = $this->createTestUser();

    //     $notes = "";
    //     try{

    //         $this->load->module("notification/notification");

    //         $notifications = $this->notification->getUserNotifications($user);

    //     }catch (NotificationException $e){
    //         $notifications = FALSE;
    //         $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
    //     }

    //     $test_name = "Test if get notifications";

    //     $this->unit->run($notifications["notifications"], "is_array", $test_name, $notes);
    //     $this->unit->run(empty($notifications["notifications"]), "is_false", $test_name." and is not empty", $notes);
    // }

}