<?php

/**
 * Permission class(on /data_types/security) test class.
 * Provide unit tests for the Permission class methods.
 * Remember to call your test methods in the index method to run them in the test report
 * To access the report generated by these tests, type on the URL: '../permission_test'
 */
require_once(MODULESPATH."/test/controllers/TestCase.php");

require_once(MODULESPATH."auth/domain/Permission.php");
require_once(MODULESPATH."auth/exception/PermissionException.php");

class Permission_Test extends TestCase{

    public function __construct(){
        parent::__construct($this);
    }

// Tests for id
    public function shouldInstantiateWithId1(){

        $id = Permission::MINIMUN_ID;

        try{
            $permission = new Permission($id, "Cursos", "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should return the ID 1";
        $this->unit->run($permission->getId(), $id, $testName);
    }

    public function shouldInstantiateWithRandomValidId(){

        $id = rand(Permission::MINIMUN_ID, PHP_INT_MAX);

        try{
            $permission = new Permission($id, "Cursos", "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should instantiate with random valid id";
        $this->unit->run($permission->getId(), $id, $testName);
    }

    public function shouldNotInstantiateWithId0(){

        $id = "0";

        try{
            $permission = new Permission($id, "Cursos", "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate id 0";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithRandomInvalidId(){

        // Negative number
        $id = rand(PHP_INT_MAX +1, Permission::MINIMUN_ID - 1);

        try{
            $permission = new Permission($id, "Cursos", "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with random invalid ID (negative number)";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNotNumericStringId(){

        // Not numeric string
        $id = "id";

        try{
            $permission = new Permission($id, "Cursos", "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with invalid not numeric string ID";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithIdFalse(){

        $id = FALSE;

        try{
            $permission = new Permission($id, "Cursos", "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with invalid FALSE ID";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithIdNull(){

        $id = NULL;

        try{
            $permission = new Permission($id, "Cursos", "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with invalid NULL ID";
        $this->unit->run($permission, "is_false", $testName);
    }

// Tests for name
    public function shouldInstantiateWithNameCursos(){

        $name = "Cursos";

        try{
            $permission = new Permission(1, $name, "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should return the name ".$name;
        $this->unit->run($permission->getName(), $name, $testName);
    }

    public function shouldInstantiateWithNameWithBlankSpace(){

        $name = "Cursos acadÃªmicos";

        try{
            $permission = new Permission(1, $name, "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should return the name ".$name;
        $this->unit->run($permission->getName(), $name, $testName);
    }

    public function shouldNotInstantiateWithNotStringName(){

        $name = 123432;

        try{
            $permission = new Permission(1, $name, "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with the name as a number ";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithFALSEName(){

        $name = FALSE;

        try{
            $permission = new Permission(1, $name, "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with the name as FALSE ";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithBlankName(){

        $name = "";

        try{
            $permission = new Permission(1, $name, "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with blank name ";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNullName(){

        $name = NULL;

        try{
            $permission = new Permission(1, $name, "course");
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with NULL name ";
        $this->unit->run($permission, "is_false", $testName);
    }

// Tests for functionality

    public function shouldInstantiateWithValidFunctionality(){

        $functionality = "course_functionality";

        try{
            $permission = new Permission(1, "Cursos", $functionality);
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should return the functionality ".$functionality;
        $this->unit->run($permission->getFunctionality(), $functionality, $testName);
    }

    public function shouldNotInstantiateWithFunctionalityWithBlankSpace(){

        $functionality = "Cursos _academicos";

        try{
            $permission = new Permission(1, "Cursos", $functionality);
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with blank space in the functionality";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNotStringFunctionality(){

        $functionality = 123432;

        try{
            $permission = new Permission(1, "Cursos", $functionality);
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with the functionality as a number ";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithFALSEFunctionality(){

        $functionality = FALSE;

        try{
            $permission = new Permission(1, "Cursos", $functionality);
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with the name as FALSE ";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithBlankFunctionality(){

        $functionality = "";

        try{
            $permission = new Permission(1, "Cursos", $functionality);
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with blank functionality";
        $this->unit->run($permission, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNullFunctionality(){

        $functionality = NULL;

        try{
            $permission = new Permission(1, "Cursos", $functionality);
        }catch(PermissionException $e){
            $permission = FALSE;
        }

        $testName = "Should not instantiate with NULL functionality ";
        $this->unit->run($permission, "is_false", $testName);
    }
}
