<?php

/**
 * Group class test class.
 * Provide unit tests for the Group class methods.
 * Remember to call your test methods in the index method to run them in the test report
 * To access the report generated by these tests, type on the URL: '../group_test'
 */

require_once(MODULESPATH."/test/controllers/TestCase.php");

require_once(MODULESPATH."auth/domain/Group.php");
require_once(MODULESPATH."/auth/domain/Permission.php");
require_once(MODULESPATH."auth/exception/GroupException.php");

class Group_Test extends TestCase{

    public function __construct(){
        parent::__construct($this);
    }

// Tests for id
    public function shouldInstantiateWithId1(){

        $id = Group::MINIMUN_ID;

        try{
            $group = new Group($id, "Secretário", "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should return the ID 1";
        $this->unit->run($group->getId(), $id, $testName);
    }

    public function shouldInstantiateWithRandomValidId(){

        $id = rand(Group::MINIMUN_ID, PHP_INT_MAX);

        try{
            $group = new Group($id, "Secretário", "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should instantiate with random valid id";
        $this->unit->run($group->getId(), $id, $testName);
    }

    public function shouldNotInstantiateWithId0(){

        $id = "0";

        try{
            $group = new Group($id, "Secretário", "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate id 0";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithRandomInvalidId(){

        // Negative number
        $id = rand(PHP_INT_MAX +1, Group::MINIMUN_ID - 1);

        try{
            $group = new Group($id, "Secretário", "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with random invalid ID (negative number)";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNotNumericStringId(){

        // Not numeric string
        $id = "id";

        try{
            $group = new Group($id, "Secretário", "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with invalid not numeric string ID";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithIdFalse(){

        $id = FALSE;

        try{
            $group = new Group($id, "Secretário", "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with invalid FALSE ID";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithIdNull(){

        $id = NULL;

        try{
            $group = new Group($id, "Secretário", "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with invalid NULL ID";
        $this->unit->run($group, "is_false", $testName);
    }

// Tests for name
    public function shouldInstantiateWithNameSecretario(){

        $name = "Secretário";

        try{
            $group = new Group(1, $name, "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should return the name ".$name;
        $this->unit->run($group->getName(), $name, $testName);
    }

    public function shouldInstantiateWithNameWithBlankSpace(){

        $name = "Secretário acadêmicos";

        try{
            $group = new Group(1, $name, "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should return the name ".$name;
        $this->unit->run($group->getName(), $name, $testName);
    }

    public function shouldNotInstantiateWithNotStringName(){

        $name = 123432;

        try{
            $group = new Group(1, $name, "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with the name as a number ";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithFALSEName(){

        $name = FALSE;

        try{
            $group = new Group(1, $name, "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with the name as FALSE ";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithBlankName(){

        $name = "";

        try{
            $group = new Group(1, $name, "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with blank name ";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNullName(){

        $name = NULL;

        try{
            $group = new Group(1, $name, "secretary");
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with NULL name ";
        $this->unit->run($group, "is_false", $testName);
    }

// Tests for profileRoute

    public function shouldInstantiateWithValidProfileRoute(){

        $profileRoute = "secretary_profileRoute";

        try{
            $group = new Group(1, "Secretário", $profileRoute);
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should return the profileRoute ".$profileRoute;
        $this->unit->run($group->getProfileRoute(), $profileRoute, $testName);
    }

    public function shouldNotInstantiateWithProfileRouteWithBlankSpace(){

        $profileRoute = "Secretário _academicos";

        try{
            $group = new Group(1, "Secretário", $profileRoute);
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with blank space in the profileRoute";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNotStringProfileRoute(){

        $profileRoute = 123432;

        try{
            $group = new Group(1, "Secretário", $profileRoute);
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with the profileRoute as a number ";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithFALSEProfileRoute(){

        $profileRoute = FALSE;

        try{
            $group = new Group(1, "Secretário", $profileRoute);
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with the name as FALSE ";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithBlankProfileRoute(){

        $profileRoute = "";

        try{
            $group = new Group(1, "Secretário", $profileRoute);
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with blank profileRoute";
        $this->unit->run($group, "is_false", $testName);
    }

    public function shouldNotInstantiateWithNullProfileRoute(){

        $profileRoute = NULL;

        try{
            $group = new Group(1, "Secretário", $profileRoute);
        }catch(GroupException $e){
            $group = FALSE;
        }

        $testName = "Should not instantiate with NULL profileRoute ";
        $this->unit->run($group, "is_false", $testName);
    }

// Test addPermission method
    public function shouldAddPermission(){

        $permission = new Permission(1, "Cursos", "course");

        try{
            $group = new Group(1, "Secretário", "secretary_home");

            $group->addPermission($permission);

            $permissions = $group->getPermissions();
            $insertedPermissionName = $permissions[0]->getName();

        }catch(GroupException $e){
            $insertedPermissionName = FALSE;
        }

        $testName = "Should return the inserted permission";
        $this->unit->run($insertedPermissionName, $permission->getName(), $testName);
    }

    public function shouldNotAddNullPermission(){

        $permission = NULL;

        try{
            $group = new Group(1, "Secretário", "secretary_home");

            $group->addPermission($permission);

        }catch(GroupException $e){
            $insertedPermissionName = FALSE;
        }

        $testName = "Should not add NULL permission";
        $this->unit->run($insertedPermissionName, "is_false", $testName);
    }

    public function shouldNotAddArrayPermission(){

        $permission = array("name" => "Secretário");

        try{
            $group = new Group(1, "Secretário", "secretary_home");

            $group->addPermission($permission);

        }catch(GroupException $e){
            $insertedPermissionName = FALSE;
        }

        $testName = "Should not add array permission";
        $this->unit->run($insertedPermissionName, "is_false", $testName);
    }

    public function shouldNotAddNonPermissionObject(){

        $permission = new Group(2, "Convidado", "guest");

        try{
            $group = new Group(1, "Secretário", "secretary_home");

            $group->addPermission($permission);

        }catch(GroupException $e){
            $insertedPermissionName = FALSE;
        }

        $testName = "Should not add non permission object";
        $this->unit->run($insertedPermissionName, "is_false", $testName);
    }

// Tests for constructor with array of permissions
    public function shouldAddPermissions(){

        $permission1 = new Permission(1, "Cursos", "course");
        $permission2 = new Permission(2, "Programas", "programs");

        $permissions = array($permission1, $permission2);

        try{
            $group = new Group(1, "Secretário", "secretary_home", $permissions);

            $groupPermissions = $group->getPermissions();
            $insertedPermissionName1 = $groupPermissions[0]->getName();
            $insertedPermissionName2 = $groupPermissions[1]->getName();

        }catch(GroupException $e){
            $insertedPermissionName = FALSE;
            $insertedPermissionName2 = FALSE;
        }

        $testName = "Should return the inserted permissions";
        $this->unit->run($insertedPermissionName1, $permission1->getName(), $testName);
        $this->unit->run($insertedPermissionName2, $permission2->getName(), $testName);
    }

    public function shouldReturnEmptyArray(){

        try{
            $group = new Group(1, "Secretário", "secretary_home");

            $groupPermissions = $group->getPermissions();

            $isEmpty = empty($groupPermissions);
        }catch(GroupException $e){
            $isEmpty = FALSE;
        }

        $testName = "Should return an empty array of permissions";
        $this->unit->run($isEmpty, "is_true", $testName);
    }

    public function shouldNotAddPermissions(){

        $permission1 = new Permission(1, "Cursos", "course");
        $permission2 = array("name" => "Programas");

        $permissions = array($permission1, $permission2);

        try{
            $group = new Group(1, "Secretário", "secretary_home", $permissions);

        }catch(GroupException $e){
            $invalidPermission = TRUE;
        }

        $testName = "Should not add a non permission object by permissions array";
        $this->unit->run($invalidPermission, "is_true", $testName);
    }
}
